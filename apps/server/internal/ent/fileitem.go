// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kamijoucen/notesync/apps/server/internal/ent/fileitem"
	"github.com/kamijoucen/notesync/apps/server/internal/ent/repository"
)

// FileItem is the model entity for the FileItem schema.
type FileItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// IsDir holds the value of the "is_dir" field.
	IsDir bool `json:"is_dir,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileItemQuery when eager-loading is set.
	Edges              FileItemEdges `json:"edges"`
	file_item_children *int
	repository_files   *int
	selectValues       sql.SelectValues
}

// FileItemEdges holds the relations/edges for other nodes in the graph.
type FileItemEdges struct {
	// Repository holds the value of the repository edge.
	Repository *Repository `json:"repository,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *FileItem `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*FileItem `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileItemEdges) RepositoryOrErr() (*Repository, error) {
	if e.Repository != nil {
		return e.Repository, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: repository.Label}
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileItemEdges) ParentOrErr() (*FileItem, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: fileitem.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e FileItemEdges) ChildrenOrErr() ([]*FileItem, error) {
	if e.loadedTypes[2] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fileitem.FieldIsDir:
			values[i] = new(sql.NullBool)
		case fileitem.FieldID:
			values[i] = new(sql.NullInt64)
		case fileitem.FieldName, fileitem.FieldHash:
			values[i] = new(sql.NullString)
		case fileitem.FieldCreateTime, fileitem.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case fileitem.ForeignKeys[0]: // file_item_children
			values[i] = new(sql.NullInt64)
		case fileitem.ForeignKeys[1]: // repository_files
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileItem fields.
func (fi *FileItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fileitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fi.ID = int(value.Int64)
		case fileitem.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				fi.CreateTime = value.Time
			}
		case fileitem.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				fi.UpdateTime = value.Time
			}
		case fileitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fi.Name = value.String
			}
		case fileitem.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				fi.Hash = value.String
			}
		case fileitem.FieldIsDir:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_dir", values[i])
			} else if value.Valid {
				fi.IsDir = value.Bool
			}
		case fileitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field file_item_children", value)
			} else if value.Valid {
				fi.file_item_children = new(int)
				*fi.file_item_children = int(value.Int64)
			}
		case fileitem.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field repository_files", value)
			} else if value.Valid {
				fi.repository_files = new(int)
				*fi.repository_files = int(value.Int64)
			}
		default:
			fi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FileItem.
// This includes values selected through modifiers, order, etc.
func (fi *FileItem) Value(name string) (ent.Value, error) {
	return fi.selectValues.Get(name)
}

// QueryRepository queries the "repository" edge of the FileItem entity.
func (fi *FileItem) QueryRepository() *RepositoryQuery {
	return NewFileItemClient(fi.config).QueryRepository(fi)
}

// QueryParent queries the "parent" edge of the FileItem entity.
func (fi *FileItem) QueryParent() *FileItemQuery {
	return NewFileItemClient(fi.config).QueryParent(fi)
}

// QueryChildren queries the "children" edge of the FileItem entity.
func (fi *FileItem) QueryChildren() *FileItemQuery {
	return NewFileItemClient(fi.config).QueryChildren(fi)
}

// Update returns a builder for updating this FileItem.
// Note that you need to call FileItem.Unwrap() before calling this method if this FileItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (fi *FileItem) Update() *FileItemUpdateOne {
	return NewFileItemClient(fi.config).UpdateOne(fi)
}

// Unwrap unwraps the FileItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fi *FileItem) Unwrap() *FileItem {
	_tx, ok := fi.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileItem is not a transactional entity")
	}
	fi.config.driver = _tx.drv
	return fi
}

// String implements the fmt.Stringer.
func (fi *FileItem) String() string {
	var builder strings.Builder
	builder.WriteString("FileItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fi.ID))
	builder.WriteString("create_time=")
	builder.WriteString(fi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fi.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fi.Name)
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(fi.Hash)
	builder.WriteString(", ")
	builder.WriteString("is_dir=")
	builder.WriteString(fmt.Sprintf("%v", fi.IsDir))
	builder.WriteByte(')')
	return builder.String()
}

// FileItems is a parsable slice of FileItem.
type FileItems []*FileItem
