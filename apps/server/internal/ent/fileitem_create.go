// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kamijoucen/notesync/apps/server/internal/ent/fileitem"
	"github.com/kamijoucen/notesync/apps/server/internal/ent/repository"
)

// FileItemCreate is the builder for creating a FileItem entity.
type FileItemCreate struct {
	config
	mutation *FileItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (fic *FileItemCreate) SetCreateTime(t time.Time) *FileItemCreate {
	fic.mutation.SetCreateTime(t)
	return fic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (fic *FileItemCreate) SetNillableCreateTime(t *time.Time) *FileItemCreate {
	if t != nil {
		fic.SetCreateTime(*t)
	}
	return fic
}

// SetUpdateTime sets the "update_time" field.
func (fic *FileItemCreate) SetUpdateTime(t time.Time) *FileItemCreate {
	fic.mutation.SetUpdateTime(t)
	return fic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (fic *FileItemCreate) SetNillableUpdateTime(t *time.Time) *FileItemCreate {
	if t != nil {
		fic.SetUpdateTime(*t)
	}
	return fic
}

// SetName sets the "name" field.
func (fic *FileItemCreate) SetName(s string) *FileItemCreate {
	fic.mutation.SetName(s)
	return fic
}

// SetHash sets the "hash" field.
func (fic *FileItemCreate) SetHash(s string) *FileItemCreate {
	fic.mutation.SetHash(s)
	return fic
}

// SetIsDir sets the "is_dir" field.
func (fic *FileItemCreate) SetIsDir(b bool) *FileItemCreate {
	fic.mutation.SetIsDir(b)
	return fic
}

// SetNillableIsDir sets the "is_dir" field if the given value is not nil.
func (fic *FileItemCreate) SetNillableIsDir(b *bool) *FileItemCreate {
	if b != nil {
		fic.SetIsDir(*b)
	}
	return fic
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (fic *FileItemCreate) SetRepositoryID(id int) *FileItemCreate {
	fic.mutation.SetRepositoryID(id)
	return fic
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (fic *FileItemCreate) SetNillableRepositoryID(id *int) *FileItemCreate {
	if id != nil {
		fic = fic.SetRepositoryID(*id)
	}
	return fic
}

// SetRepository sets the "repository" edge to the Repository entity.
func (fic *FileItemCreate) SetRepository(r *Repository) *FileItemCreate {
	return fic.SetRepositoryID(r.ID)
}

// SetParentID sets the "parent" edge to the FileItem entity by ID.
func (fic *FileItemCreate) SetParentID(id int) *FileItemCreate {
	fic.mutation.SetParentID(id)
	return fic
}

// SetNillableParentID sets the "parent" edge to the FileItem entity by ID if the given value is not nil.
func (fic *FileItemCreate) SetNillableParentID(id *int) *FileItemCreate {
	if id != nil {
		fic = fic.SetParentID(*id)
	}
	return fic
}

// SetParent sets the "parent" edge to the FileItem entity.
func (fic *FileItemCreate) SetParent(f *FileItem) *FileItemCreate {
	return fic.SetParentID(f.ID)
}

// AddChildIDs adds the "children" edge to the FileItem entity by IDs.
func (fic *FileItemCreate) AddChildIDs(ids ...int) *FileItemCreate {
	fic.mutation.AddChildIDs(ids...)
	return fic
}

// AddChildren adds the "children" edges to the FileItem entity.
func (fic *FileItemCreate) AddChildren(f ...*FileItem) *FileItemCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fic.AddChildIDs(ids...)
}

// Mutation returns the FileItemMutation object of the builder.
func (fic *FileItemCreate) Mutation() *FileItemMutation {
	return fic.mutation
}

// Save creates the FileItem in the database.
func (fic *FileItemCreate) Save(ctx context.Context) (*FileItem, error) {
	fic.defaults()
	return withHooks(ctx, fic.sqlSave, fic.mutation, fic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fic *FileItemCreate) SaveX(ctx context.Context) *FileItem {
	v, err := fic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fic *FileItemCreate) Exec(ctx context.Context) error {
	_, err := fic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fic *FileItemCreate) ExecX(ctx context.Context) {
	if err := fic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fic *FileItemCreate) defaults() {
	if _, ok := fic.mutation.CreateTime(); !ok {
		v := fileitem.DefaultCreateTime()
		fic.mutation.SetCreateTime(v)
	}
	if _, ok := fic.mutation.UpdateTime(); !ok {
		v := fileitem.DefaultUpdateTime()
		fic.mutation.SetUpdateTime(v)
	}
	if _, ok := fic.mutation.IsDir(); !ok {
		v := fileitem.DefaultIsDir
		fic.mutation.SetIsDir(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fic *FileItemCreate) check() error {
	if _, ok := fic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "FileItem.create_time"`)}
	}
	if _, ok := fic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "FileItem.update_time"`)}
	}
	if _, ok := fic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FileItem.name"`)}
	}
	if v, ok := fic.mutation.Name(); ok {
		if err := fileitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FileItem.name": %w`, err)}
		}
	}
	if _, ok := fic.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "FileItem.hash"`)}
	}
	if v, ok := fic.mutation.Hash(); ok {
		if err := fileitem.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "FileItem.hash": %w`, err)}
		}
	}
	if _, ok := fic.mutation.IsDir(); !ok {
		return &ValidationError{Name: "is_dir", err: errors.New(`ent: missing required field "FileItem.is_dir"`)}
	}
	return nil
}

func (fic *FileItemCreate) sqlSave(ctx context.Context) (*FileItem, error) {
	if err := fic.check(); err != nil {
		return nil, err
	}
	_node, _spec := fic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fic.mutation.id = &_node.ID
	fic.mutation.done = true
	return _node, nil
}

func (fic *FileItemCreate) createSpec() (*FileItem, *sqlgraph.CreateSpec) {
	var (
		_node = &FileItem{config: fic.config}
		_spec = sqlgraph.NewCreateSpec(fileitem.Table, sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fic.conflict
	if value, ok := fic.mutation.CreateTime(); ok {
		_spec.SetField(fileitem.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := fic.mutation.UpdateTime(); ok {
		_spec.SetField(fileitem.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := fic.mutation.Name(); ok {
		_spec.SetField(fileitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fic.mutation.Hash(); ok {
		_spec.SetField(fileitem.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := fic.mutation.IsDir(); ok {
		_spec.SetField(fileitem.FieldIsDir, field.TypeBool, value)
		_node.IsDir = value
	}
	if nodes := fic.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileitem.RepositoryTable,
			Columns: []string{fileitem.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_files = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fic.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileitem.ParentTable,
			Columns: []string{fileitem.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.file_item_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fic.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileitem.ChildrenTable,
			Columns: []string{fileitem.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FileItem.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileItemUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (fic *FileItemCreate) OnConflict(opts ...sql.ConflictOption) *FileItemUpsertOne {
	fic.conflict = opts
	return &FileItemUpsertOne{
		create: fic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FileItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fic *FileItemCreate) OnConflictColumns(columns ...string) *FileItemUpsertOne {
	fic.conflict = append(fic.conflict, sql.ConflictColumns(columns...))
	return &FileItemUpsertOne{
		create: fic,
	}
}

type (
	// FileItemUpsertOne is the builder for "upsert"-ing
	//  one FileItem node.
	FileItemUpsertOne struct {
		create *FileItemCreate
	}

	// FileItemUpsert is the "OnConflict" setter.
	FileItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *FileItemUpsert) SetUpdateTime(v time.Time) *FileItemUpsert {
	u.Set(fileitem.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *FileItemUpsert) UpdateUpdateTime() *FileItemUpsert {
	u.SetExcluded(fileitem.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *FileItemUpsert) SetName(v string) *FileItemUpsert {
	u.Set(fileitem.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FileItemUpsert) UpdateName() *FileItemUpsert {
	u.SetExcluded(fileitem.FieldName)
	return u
}

// SetHash sets the "hash" field.
func (u *FileItemUpsert) SetHash(v string) *FileItemUpsert {
	u.Set(fileitem.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *FileItemUpsert) UpdateHash() *FileItemUpsert {
	u.SetExcluded(fileitem.FieldHash)
	return u
}

// SetIsDir sets the "is_dir" field.
func (u *FileItemUpsert) SetIsDir(v bool) *FileItemUpsert {
	u.Set(fileitem.FieldIsDir, v)
	return u
}

// UpdateIsDir sets the "is_dir" field to the value that was provided on create.
func (u *FileItemUpsert) UpdateIsDir() *FileItemUpsert {
	u.SetExcluded(fileitem.FieldIsDir)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.FileItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FileItemUpsertOne) UpdateNewValues() *FileItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(fileitem.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FileItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FileItemUpsertOne) Ignore() *FileItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileItemUpsertOne) DoNothing() *FileItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileItemCreate.OnConflict
// documentation for more info.
func (u *FileItemUpsertOne) Update(set func(*FileItemUpsert)) *FileItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *FileItemUpsertOne) SetUpdateTime(v time.Time) *FileItemUpsertOne {
	return u.Update(func(s *FileItemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *FileItemUpsertOne) UpdateUpdateTime() *FileItemUpsertOne {
	return u.Update(func(s *FileItemUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *FileItemUpsertOne) SetName(v string) *FileItemUpsertOne {
	return u.Update(func(s *FileItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FileItemUpsertOne) UpdateName() *FileItemUpsertOne {
	return u.Update(func(s *FileItemUpsert) {
		s.UpdateName()
	})
}

// SetHash sets the "hash" field.
func (u *FileItemUpsertOne) SetHash(v string) *FileItemUpsertOne {
	return u.Update(func(s *FileItemUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *FileItemUpsertOne) UpdateHash() *FileItemUpsertOne {
	return u.Update(func(s *FileItemUpsert) {
		s.UpdateHash()
	})
}

// SetIsDir sets the "is_dir" field.
func (u *FileItemUpsertOne) SetIsDir(v bool) *FileItemUpsertOne {
	return u.Update(func(s *FileItemUpsert) {
		s.SetIsDir(v)
	})
}

// UpdateIsDir sets the "is_dir" field to the value that was provided on create.
func (u *FileItemUpsertOne) UpdateIsDir() *FileItemUpsertOne {
	return u.Update(func(s *FileItemUpsert) {
		s.UpdateIsDir()
	})
}

// Exec executes the query.
func (u *FileItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FileItemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FileItemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FileItemCreateBulk is the builder for creating many FileItem entities in bulk.
type FileItemCreateBulk struct {
	config
	err      error
	builders []*FileItemCreate
	conflict []sql.ConflictOption
}

// Save creates the FileItem entities in the database.
func (ficb *FileItemCreateBulk) Save(ctx context.Context) ([]*FileItem, error) {
	if ficb.err != nil {
		return nil, ficb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ficb.builders))
	nodes := make([]*FileItem, len(ficb.builders))
	mutators := make([]Mutator, len(ficb.builders))
	for i := range ficb.builders {
		func(i int, root context.Context) {
			builder := ficb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ficb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ficb *FileItemCreateBulk) SaveX(ctx context.Context) []*FileItem {
	v, err := ficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ficb *FileItemCreateBulk) Exec(ctx context.Context) error {
	_, err := ficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ficb *FileItemCreateBulk) ExecX(ctx context.Context) {
	if err := ficb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FileItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileItemUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ficb *FileItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *FileItemUpsertBulk {
	ficb.conflict = opts
	return &FileItemUpsertBulk{
		create: ficb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FileItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ficb *FileItemCreateBulk) OnConflictColumns(columns ...string) *FileItemUpsertBulk {
	ficb.conflict = append(ficb.conflict, sql.ConflictColumns(columns...))
	return &FileItemUpsertBulk{
		create: ficb,
	}
}

// FileItemUpsertBulk is the builder for "upsert"-ing
// a bulk of FileItem nodes.
type FileItemUpsertBulk struct {
	create *FileItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FileItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FileItemUpsertBulk) UpdateNewValues() *FileItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(fileitem.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FileItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FileItemUpsertBulk) Ignore() *FileItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileItemUpsertBulk) DoNothing() *FileItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileItemCreateBulk.OnConflict
// documentation for more info.
func (u *FileItemUpsertBulk) Update(set func(*FileItemUpsert)) *FileItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *FileItemUpsertBulk) SetUpdateTime(v time.Time) *FileItemUpsertBulk {
	return u.Update(func(s *FileItemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *FileItemUpsertBulk) UpdateUpdateTime() *FileItemUpsertBulk {
	return u.Update(func(s *FileItemUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *FileItemUpsertBulk) SetName(v string) *FileItemUpsertBulk {
	return u.Update(func(s *FileItemUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FileItemUpsertBulk) UpdateName() *FileItemUpsertBulk {
	return u.Update(func(s *FileItemUpsert) {
		s.UpdateName()
	})
}

// SetHash sets the "hash" field.
func (u *FileItemUpsertBulk) SetHash(v string) *FileItemUpsertBulk {
	return u.Update(func(s *FileItemUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *FileItemUpsertBulk) UpdateHash() *FileItemUpsertBulk {
	return u.Update(func(s *FileItemUpsert) {
		s.UpdateHash()
	})
}

// SetIsDir sets the "is_dir" field.
func (u *FileItemUpsertBulk) SetIsDir(v bool) *FileItemUpsertBulk {
	return u.Update(func(s *FileItemUpsert) {
		s.SetIsDir(v)
	})
}

// UpdateIsDir sets the "is_dir" field to the value that was provided on create.
func (u *FileItemUpsertBulk) UpdateIsDir() *FileItemUpsertBulk {
	return u.Update(func(s *FileItemUpsert) {
		s.UpdateIsDir()
	})
}

// Exec executes the query.
func (u *FileItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FileItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
