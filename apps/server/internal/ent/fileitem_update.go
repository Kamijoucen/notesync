// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kamijoucen/notesync/apps/server/internal/ent/fileitem"
	"github.com/kamijoucen/notesync/apps/server/internal/ent/predicate"
	"github.com/kamijoucen/notesync/apps/server/internal/ent/repository"
)

// FileItemUpdate is the builder for updating FileItem entities.
type FileItemUpdate struct {
	config
	hooks    []Hook
	mutation *FileItemMutation
}

// Where appends a list predicates to the FileItemUpdate builder.
func (fiu *FileItemUpdate) Where(ps ...predicate.FileItem) *FileItemUpdate {
	fiu.mutation.Where(ps...)
	return fiu
}

// SetUpdateTime sets the "update_time" field.
func (fiu *FileItemUpdate) SetUpdateTime(t time.Time) *FileItemUpdate {
	fiu.mutation.SetUpdateTime(t)
	return fiu
}

// SetName sets the "name" field.
func (fiu *FileItemUpdate) SetName(s string) *FileItemUpdate {
	fiu.mutation.SetName(s)
	return fiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fiu *FileItemUpdate) SetNillableName(s *string) *FileItemUpdate {
	if s != nil {
		fiu.SetName(*s)
	}
	return fiu
}

// SetHash sets the "hash" field.
func (fiu *FileItemUpdate) SetHash(s string) *FileItemUpdate {
	fiu.mutation.SetHash(s)
	return fiu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (fiu *FileItemUpdate) SetNillableHash(s *string) *FileItemUpdate {
	if s != nil {
		fiu.SetHash(*s)
	}
	return fiu
}

// SetIsDir sets the "is_dir" field.
func (fiu *FileItemUpdate) SetIsDir(b bool) *FileItemUpdate {
	fiu.mutation.SetIsDir(b)
	return fiu
}

// SetNillableIsDir sets the "is_dir" field if the given value is not nil.
func (fiu *FileItemUpdate) SetNillableIsDir(b *bool) *FileItemUpdate {
	if b != nil {
		fiu.SetIsDir(*b)
	}
	return fiu
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (fiu *FileItemUpdate) SetRepositoryID(id int) *FileItemUpdate {
	fiu.mutation.SetRepositoryID(id)
	return fiu
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (fiu *FileItemUpdate) SetNillableRepositoryID(id *int) *FileItemUpdate {
	if id != nil {
		fiu = fiu.SetRepositoryID(*id)
	}
	return fiu
}

// SetRepository sets the "repository" edge to the Repository entity.
func (fiu *FileItemUpdate) SetRepository(r *Repository) *FileItemUpdate {
	return fiu.SetRepositoryID(r.ID)
}

// SetParentID sets the "parent" edge to the FileItem entity by ID.
func (fiu *FileItemUpdate) SetParentID(id int) *FileItemUpdate {
	fiu.mutation.SetParentID(id)
	return fiu
}

// SetNillableParentID sets the "parent" edge to the FileItem entity by ID if the given value is not nil.
func (fiu *FileItemUpdate) SetNillableParentID(id *int) *FileItemUpdate {
	if id != nil {
		fiu = fiu.SetParentID(*id)
	}
	return fiu
}

// SetParent sets the "parent" edge to the FileItem entity.
func (fiu *FileItemUpdate) SetParent(f *FileItem) *FileItemUpdate {
	return fiu.SetParentID(f.ID)
}

// AddChildIDs adds the "children" edge to the FileItem entity by IDs.
func (fiu *FileItemUpdate) AddChildIDs(ids ...int) *FileItemUpdate {
	fiu.mutation.AddChildIDs(ids...)
	return fiu
}

// AddChildren adds the "children" edges to the FileItem entity.
func (fiu *FileItemUpdate) AddChildren(f ...*FileItem) *FileItemUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiu.AddChildIDs(ids...)
}

// Mutation returns the FileItemMutation object of the builder.
func (fiu *FileItemUpdate) Mutation() *FileItemMutation {
	return fiu.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (fiu *FileItemUpdate) ClearRepository() *FileItemUpdate {
	fiu.mutation.ClearRepository()
	return fiu
}

// ClearParent clears the "parent" edge to the FileItem entity.
func (fiu *FileItemUpdate) ClearParent() *FileItemUpdate {
	fiu.mutation.ClearParent()
	return fiu
}

// ClearChildren clears all "children" edges to the FileItem entity.
func (fiu *FileItemUpdate) ClearChildren() *FileItemUpdate {
	fiu.mutation.ClearChildren()
	return fiu
}

// RemoveChildIDs removes the "children" edge to FileItem entities by IDs.
func (fiu *FileItemUpdate) RemoveChildIDs(ids ...int) *FileItemUpdate {
	fiu.mutation.RemoveChildIDs(ids...)
	return fiu
}

// RemoveChildren removes "children" edges to FileItem entities.
func (fiu *FileItemUpdate) RemoveChildren(f ...*FileItem) *FileItemUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiu.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fiu *FileItemUpdate) Save(ctx context.Context) (int, error) {
	fiu.defaults()
	return withHooks(ctx, fiu.sqlSave, fiu.mutation, fiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiu *FileItemUpdate) SaveX(ctx context.Context) int {
	affected, err := fiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fiu *FileItemUpdate) Exec(ctx context.Context) error {
	_, err := fiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiu *FileItemUpdate) ExecX(ctx context.Context) {
	if err := fiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiu *FileItemUpdate) defaults() {
	if _, ok := fiu.mutation.UpdateTime(); !ok {
		v := fileitem.UpdateDefaultUpdateTime()
		fiu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiu *FileItemUpdate) check() error {
	if v, ok := fiu.mutation.Name(); ok {
		if err := fileitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FileItem.name": %w`, err)}
		}
	}
	if v, ok := fiu.mutation.Hash(); ok {
		if err := fileitem.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "FileItem.hash": %w`, err)}
		}
	}
	return nil
}

func (fiu *FileItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fileitem.Table, fileitem.Columns, sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt))
	if ps := fiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiu.mutation.UpdateTime(); ok {
		_spec.SetField(fileitem.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := fiu.mutation.Name(); ok {
		_spec.SetField(fileitem.FieldName, field.TypeString, value)
	}
	if value, ok := fiu.mutation.Hash(); ok {
		_spec.SetField(fileitem.FieldHash, field.TypeString, value)
	}
	if value, ok := fiu.mutation.IsDir(); ok {
		_spec.SetField(fileitem.FieldIsDir, field.TypeBool, value)
	}
	if fiu.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileitem.RepositoryTable,
			Columns: []string{fileitem.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileitem.RepositoryTable,
			Columns: []string{fileitem.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileitem.ParentTable,
			Columns: []string{fileitem.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileitem.ParentTable,
			Columns: []string{fileitem.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileitem.ChildrenTable,
			Columns: []string{fileitem.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !fiu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileitem.ChildrenTable,
			Columns: []string{fileitem.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileitem.ChildrenTable,
			Columns: []string{fileitem.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fiu.mutation.done = true
	return n, nil
}

// FileItemUpdateOne is the builder for updating a single FileItem entity.
type FileItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileItemMutation
}

// SetUpdateTime sets the "update_time" field.
func (fiuo *FileItemUpdateOne) SetUpdateTime(t time.Time) *FileItemUpdateOne {
	fiuo.mutation.SetUpdateTime(t)
	return fiuo
}

// SetName sets the "name" field.
func (fiuo *FileItemUpdateOne) SetName(s string) *FileItemUpdateOne {
	fiuo.mutation.SetName(s)
	return fiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fiuo *FileItemUpdateOne) SetNillableName(s *string) *FileItemUpdateOne {
	if s != nil {
		fiuo.SetName(*s)
	}
	return fiuo
}

// SetHash sets the "hash" field.
func (fiuo *FileItemUpdateOne) SetHash(s string) *FileItemUpdateOne {
	fiuo.mutation.SetHash(s)
	return fiuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (fiuo *FileItemUpdateOne) SetNillableHash(s *string) *FileItemUpdateOne {
	if s != nil {
		fiuo.SetHash(*s)
	}
	return fiuo
}

// SetIsDir sets the "is_dir" field.
func (fiuo *FileItemUpdateOne) SetIsDir(b bool) *FileItemUpdateOne {
	fiuo.mutation.SetIsDir(b)
	return fiuo
}

// SetNillableIsDir sets the "is_dir" field if the given value is not nil.
func (fiuo *FileItemUpdateOne) SetNillableIsDir(b *bool) *FileItemUpdateOne {
	if b != nil {
		fiuo.SetIsDir(*b)
	}
	return fiuo
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (fiuo *FileItemUpdateOne) SetRepositoryID(id int) *FileItemUpdateOne {
	fiuo.mutation.SetRepositoryID(id)
	return fiuo
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (fiuo *FileItemUpdateOne) SetNillableRepositoryID(id *int) *FileItemUpdateOne {
	if id != nil {
		fiuo = fiuo.SetRepositoryID(*id)
	}
	return fiuo
}

// SetRepository sets the "repository" edge to the Repository entity.
func (fiuo *FileItemUpdateOne) SetRepository(r *Repository) *FileItemUpdateOne {
	return fiuo.SetRepositoryID(r.ID)
}

// SetParentID sets the "parent" edge to the FileItem entity by ID.
func (fiuo *FileItemUpdateOne) SetParentID(id int) *FileItemUpdateOne {
	fiuo.mutation.SetParentID(id)
	return fiuo
}

// SetNillableParentID sets the "parent" edge to the FileItem entity by ID if the given value is not nil.
func (fiuo *FileItemUpdateOne) SetNillableParentID(id *int) *FileItemUpdateOne {
	if id != nil {
		fiuo = fiuo.SetParentID(*id)
	}
	return fiuo
}

// SetParent sets the "parent" edge to the FileItem entity.
func (fiuo *FileItemUpdateOne) SetParent(f *FileItem) *FileItemUpdateOne {
	return fiuo.SetParentID(f.ID)
}

// AddChildIDs adds the "children" edge to the FileItem entity by IDs.
func (fiuo *FileItemUpdateOne) AddChildIDs(ids ...int) *FileItemUpdateOne {
	fiuo.mutation.AddChildIDs(ids...)
	return fiuo
}

// AddChildren adds the "children" edges to the FileItem entity.
func (fiuo *FileItemUpdateOne) AddChildren(f ...*FileItem) *FileItemUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiuo.AddChildIDs(ids...)
}

// Mutation returns the FileItemMutation object of the builder.
func (fiuo *FileItemUpdateOne) Mutation() *FileItemMutation {
	return fiuo.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (fiuo *FileItemUpdateOne) ClearRepository() *FileItemUpdateOne {
	fiuo.mutation.ClearRepository()
	return fiuo
}

// ClearParent clears the "parent" edge to the FileItem entity.
func (fiuo *FileItemUpdateOne) ClearParent() *FileItemUpdateOne {
	fiuo.mutation.ClearParent()
	return fiuo
}

// ClearChildren clears all "children" edges to the FileItem entity.
func (fiuo *FileItemUpdateOne) ClearChildren() *FileItemUpdateOne {
	fiuo.mutation.ClearChildren()
	return fiuo
}

// RemoveChildIDs removes the "children" edge to FileItem entities by IDs.
func (fiuo *FileItemUpdateOne) RemoveChildIDs(ids ...int) *FileItemUpdateOne {
	fiuo.mutation.RemoveChildIDs(ids...)
	return fiuo
}

// RemoveChildren removes "children" edges to FileItem entities.
func (fiuo *FileItemUpdateOne) RemoveChildren(f ...*FileItem) *FileItemUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiuo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the FileItemUpdate builder.
func (fiuo *FileItemUpdateOne) Where(ps ...predicate.FileItem) *FileItemUpdateOne {
	fiuo.mutation.Where(ps...)
	return fiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fiuo *FileItemUpdateOne) Select(field string, fields ...string) *FileItemUpdateOne {
	fiuo.fields = append([]string{field}, fields...)
	return fiuo
}

// Save executes the query and returns the updated FileItem entity.
func (fiuo *FileItemUpdateOne) Save(ctx context.Context) (*FileItem, error) {
	fiuo.defaults()
	return withHooks(ctx, fiuo.sqlSave, fiuo.mutation, fiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiuo *FileItemUpdateOne) SaveX(ctx context.Context) *FileItem {
	node, err := fiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiuo *FileItemUpdateOne) Exec(ctx context.Context) error {
	_, err := fiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiuo *FileItemUpdateOne) ExecX(ctx context.Context) {
	if err := fiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiuo *FileItemUpdateOne) defaults() {
	if _, ok := fiuo.mutation.UpdateTime(); !ok {
		v := fileitem.UpdateDefaultUpdateTime()
		fiuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiuo *FileItemUpdateOne) check() error {
	if v, ok := fiuo.mutation.Name(); ok {
		if err := fileitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FileItem.name": %w`, err)}
		}
	}
	if v, ok := fiuo.mutation.Hash(); ok {
		if err := fileitem.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "FileItem.hash": %w`, err)}
		}
	}
	return nil
}

func (fiuo *FileItemUpdateOne) sqlSave(ctx context.Context) (_node *FileItem, err error) {
	if err := fiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fileitem.Table, fileitem.Columns, sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt))
	id, ok := fiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fileitem.FieldID)
		for _, f := range fields {
			if !fileitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fileitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiuo.mutation.UpdateTime(); ok {
		_spec.SetField(fileitem.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := fiuo.mutation.Name(); ok {
		_spec.SetField(fileitem.FieldName, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.Hash(); ok {
		_spec.SetField(fileitem.FieldHash, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.IsDir(); ok {
		_spec.SetField(fileitem.FieldIsDir, field.TypeBool, value)
	}
	if fiuo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileitem.RepositoryTable,
			Columns: []string{fileitem.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileitem.RepositoryTable,
			Columns: []string{fileitem.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileitem.ParentTable,
			Columns: []string{fileitem.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileitem.ParentTable,
			Columns: []string{fileitem.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileitem.ChildrenTable,
			Columns: []string{fileitem.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !fiuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileitem.ChildrenTable,
			Columns: []string{fileitem.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fileitem.ChildrenTable,
			Columns: []string{fileitem.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FileItem{config: fiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fiuo.mutation.done = true
	return _node, nil
}
